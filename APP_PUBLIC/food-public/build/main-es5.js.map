{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.module.ts","webpack:///src/app/food-service.service.ts","webpack:///src/app/home-list/home-list.component.ts","webpack:///src/app/home-list/home-list.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppModule","declarations","imports","providers","bootstrap","FoodServiceService","http","foodsUrl","get","toPromise","response","console","log","handleError","error","providedIn","HomeListComponent","foodService","getFoods","foods","map","food","selector","templateUrl","styles","environment","production","bootstrapModule","err"],"mappings":";;;;;;;;;;;;;;;;;AAAA,aAASA,wBAAT,CAAkCC,GAAlC,EAAuC;AACtC;AACA;AACA,aAAOC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAW;AACxC,YAAIC,CAAC,GAAG,IAAIC,KAAJ,CAAU,yBAAyBL,GAAzB,GAA+B,GAAzC,CAAR;AACAI,SAAC,CAACE,IAAF,GAAS,kBAAT;AACA,cAAMF,CAAN;AACA,OAJM,CAAP;AAKA;;AACDL,4BAAwB,CAACQ,IAAzB,GAAgC,YAAW;AAAE,aAAO,EAAP;AAAY,KAAzD;;AACAR,4BAAwB,CAACG,OAAzB,GAAmCH,wBAAnC;AACAS,UAAM,CAACC,OAAP,GAAiBV,wBAAjB;AACAA,4BAAwB,CAACW,EAAzB,GAA8B,yCAA9B;;;;;;;;;;;;;;;;ACZA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAYaC,S;;;;;YAAAA,S;AAAS,kBAFR,gFAEQ;;;;yBAATA,S;AAAS,O;AAAA,iBAHT,E;AAAE,gBADJ,CAAC,uEAAD,EAAgB,qEAAhB,CACI;;;;0HAGFA,S,EAAS;AAAA,uBALL,gFAKK;AALY,kBACtB,uEADsB,EACP,qEADO;AAKZ,O;AAJqB,K;;;;;sEAI9BA,S,EAAS;cANrB,sDAMqB;eANZ;AACRC,sBAAY,EAAE,CAAC,gFAAD,CADN;AAERC,iBAAO,EAAE,CAAC,uEAAD,EAAgB,qEAAhB,CAFD;AAGRC,mBAAS,EAAE,EAHH;AAIRC,mBAAS,EAAE,CAAC,gFAAD;AAJH,S;AAMY,Q;;;;;;;;;;;;;;;;;;ACXtB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAKaC,kB;;;AAEX,kCAAoBC,IAApB,EAAsC;AAAA;;AAAlB,aAAAA,IAAA,GAAAA,IAAA;AADZ,aAAAC,QAAA,GAAW,iCAAX;AACgC;;;;mCAEhC;AACN,iBAAO,KAAKD,IAAL,CACJE,GADI,CACQ,KAAKD,QADb,EAEJE,SAFI,GAGJjB,IAHI,CAGC,UAAAkB,QAAQ,EAAI;AAChBC,mBAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,mBAAOA,QAAP;AACD,WANI,WAOE,KAAKG,WAPP,CAAP;AAQD;;;oCACmBC,K,EAAY;AAC9BH,iBAAO,CAACC,GAAR,CAAY,OAAZ;AACD;;;;;;;uBAhBUP,kB,EAAkB,uH;AAAA,K;;;aAAlBA,kB;AAAkB,eAAlBA,kBAAkB,K;AAAA,kBAFjB;;;;;sEAEDA,kB,EAAkB;cAH9B,wDAG8B;eAHnB;AACVU,oBAAU,EAAE;AADF,S;AAGmB,Q;;;;;;;;;;;;;;;;;;;;;;ACN/B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACEE;;AACE;;AACE;;AAAI;;AAAsB;;AAC1B;;AAAI;;AAAsB;;AAC5B;;AACF;;;;;;AAHQ;;AAAA;;AACA;;AAAA;;;;QDIGC,iB;;;AAEX,iCAAoBC,WAApB,EAAqD;AAAA;;AAAjC,aAAAA,WAAA,GAAAA,WAAA;AAAmC;;;;mCAE/C;AAAA;;AACN,eAAKA,WAAL,CAAiBC,QAAjB,GAA4B1B,IAA5B,CAAiC,UAAC2B,KAAD,EAAmB;AAClD,iBAAI,CAACA,KAAL,GAAaA,KAAK,CAACC,GAAN,CAAU,UAAAC,IAAI,EAAI;AAC7B,qBAAOA,IAAP;AACD,aAFY,CAAb;AAGD,WAJD;AAKD;;;;;;;uBAVUL,iB,EAAiB,yI;AAAA,K;;;YAAjBA,iB;AAAiB,oC;AAAA,kFAFjB,CAAC,wEAAD,CAEiB,E;AAFG,c;AAAA,a;AAAA,uE;AAAA;AAAA;ACPjC;;AAAG;;AAAU;;AACb;;AACE;;AAMF;;;;AANQ;;AAAA;;;;;;;;;sEDOKA,iB,EAAiB;cAN7B,uDAM6B;eANnB;AACTM,kBAAQ,EAAE,eADD;AAETC,qBAAW,EAAE,4BAFJ;AAGTC,gBAAM,EAAE,EAHC;AAITrB,mBAAS,EAAE,CAAC,wEAAD;AAJF,S;AAMmB,Q;;;;;;;;;;;;;;;;;;;;;;AET9B;AAAA;;;AAAA;AAAA;AAAA,O,CAAA;AACA;AACA;;;AAEO,QAAMsB,WAAW,GAAG;AACzBC,gBAAU,EAAE;AADa,KAApB;AAIP;;;;;;;AAOA;;;;;;;;;;;;;;;;;ACfA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAMA,QAAI,sEAAYA,UAAhB,EAA4B;AAC1B;AACD;;AAED,gFAAyBC,eAAzB,CAAyC,yDAAzC,WACS,UAAAC,GAAG;AAAA,aAAIjB,OAAO,CAACG,KAAR,CAAcc,GAAd,CAAJ;AAAA,KADZ","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { BrowserModule } from \"@angular/platform-browser\";\nimport { NgModule } from \"@angular/core\";\n\nimport { HttpClientModule } from \"@angular/common/http\";\nimport { HomeListComponent } from \"./home-list/home-list.component\";\n\n@NgModule({\n  declarations: [HomeListComponent],\n  imports: [BrowserModule, HttpClientModule],\n  providers: [],\n  bootstrap: [HomeListComponent]\n})\nexport class AppModule {}\n","import { Food } from \"./food\";\nimport { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpResponse } from \"@angular/common/http\";\n@Injectable({\n  providedIn: \"root\"\n})\nexport class FoodServiceService {\n  private foodsUrl = \"http://localhost:3000/api/foods\";\n  constructor(private http: HttpClient) {}\n\n  getFoods(): Promise<void | Food[]> {\n    return this.http\n      .get<Food[]>(this.foodsUrl)\n      .toPromise()\n      .then(response => {\n        console.log(response);\n        return response as Food[];\n      })\n      .catch(this.handleError);\n  }\n  private handleError(error: any) {\n    console.log(\"error\");\n  }\n}\n","import { FoodServiceService } from \"./../food-service.service\";\nimport { Food } from \"./../food\";\nimport { Component, OnInit } from \"@angular/core\";\n@Component({\n  selector: \"app-home-list\",\n  templateUrl: \"./home-list.component.html\",\n  styles: [],\n  providers: [FoodServiceService]\n})\nexport class HomeListComponent implements OnInit {\n  foods: Food[];\n  constructor(private foodService: FoodServiceService) {}\n\n  ngOnInit(): void {\n    this.foodService.getFoods().then((foods: Food[]) => {\n      this.foods = foods.map(food => {\n        return food;\n      });\n    });\n  }\n}\n","<p>Food List!</p>\n<div>\n  <span *ngFor=\"let food of foods\" class=\"badge\">\n    <ul>\n      <li>Name : {{ food.name }}</li>\n      <li>Type : {{ food.type }}</li>\n    </ul>\n  </span>\n</div>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}